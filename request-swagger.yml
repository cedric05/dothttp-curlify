openapi: 3.0.0
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/e3273/dothttp/1.0.0
info:
  description: This is a simple API
  version: "1.0.0"
  title: Simple Inventory API
  contact:
    email: you@your-company.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: admins
    description: Secured Admin-only calls
  - name: developers
    description: Operations available to regular developers
paths:
  /collection:
    get:
      description: presents with list of collections available.
      parameters:
        - in: query
          name: from
          description: from count
          schema:
            type: integer
            format: int32
            minimum: 0
        - in: query
          name: to
          description: to count
          schema:
            type: integer
            format: int32
            minimum: 0
        - in: query
          name: name
          description: filter by name
          schema:
            type: string
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Collection'
        '400':
          description: invalid
        '403':
          description: forbidden
    post:
      description: create collection
      responses:
        '201':
          description: 'collection created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Collection'
  /collection/${id}:
    delete:
      description: presents with list of collections available.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                type: object
        '400':
          description: invalid
        '403':
          description: forbidden
    put:
      description: updates name and description
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                type: object
                properties:
                  name: 
                    type: string
                  description:
                    type: string
        '400':
          description: invalid
        '403':
          description: forbidden
  /collection/${id}/regenerate:
    post:
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      description: regenerates api key
      responses:
        '200':
          description: invalidates earlier api_key and create new 
          content:
            application/json:
              schema:
                type: object
                properties:
                  api_key:
                    type: string
                  url:
                    type: string
  /collection/${id}/request:
    get:
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      description: regenerates api key
      responses:
        '200':
          description: invalidates earlier api_key and create new 
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Request'
  /collection/${id}/request/{reqid}:
    delete:
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
        - in: path
          name: reqid
          required: true
          schema:
            type: string
      description: regenerates api key
      responses:
        '200':
          description: deleted successfully
          content:
            application/json:
              schema:
                type: object
    post:
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
        - in: path
          name: reqid
          required: true
          schema:
            type: string
      description: regenerates api key
      responses:
        '200':
          description: deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Request'
components:
  schemas:
    Collection:
      type: object
      required: 
        - id
        - userid
        - url
        - description
        - name
        - createdDate
        - updateDate
      properties:
          id:
            type: string
          user:
            type: string
          url:
            type: string
          description: 
            type: string
          name:
            type: string
          createdDate:
            type: number
          updatedDate:
            type: number
    Request:
      type: object
      required:
        - id
        - httpdef
        - curl
        - url
        - method
        - tag
      properties:
          id:
            type: string
            format: uuid
          collectionid:
            type: string
            format: uuid
          createdDate:
            type: number
          updatedDate:
            type: number
          inbound:
            type: boolean
          httpdef:
            type: string
          curl:
            type: string
          url:
            type: string
          method:
            enum: [GET, POST, DELETE, PUT, OPTIONS, CONNECT, HEAD]
            type: string
          queryparams:
            type: array
            items:
              $ref: '#/components/schemas/QueryParams'
          headers:
            type: array
            items:
              $ref: '#/components/schemas/Headers'
          payload:
            type: object
            required: 
              - payloadtype
            properties:
              payloadtype:
                enum: ['json', 'raw', 'urlencode', 'multipart']
          tag:
            type: array
            items:
              type: string
    Headers:
        required:
          - key
          - value
        properties:
          key:
            type: string
          value:
            type: string
          enabled:
            type: boolean
          description:
            type: string
    QueryParams:
        required:
          - key
          - value
        properties:
          key:
            type: string
          value:
            type: string
          enabled:
            type: boolean
          description:
            type: string
